{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	"Print to cout": {
		"prefix": "co",
		"body": [
			"std::cout << $1 << std::endl;"
		]
	},
	"Print newline": {
		"prefix": "nl",
		"body": [
			"std::cout << std::endl;"
		]
	},
	"Print variable to cout": {
		"prefix": "ce",
		"body": [
			"std::cout << \"${1:name} = \" << $1 << std::endl;"
		]
	},
	"Create namespace": {
		"prefix": "nsp",
		"body": [
			"namespace ${1:name} {",
			"  $2",
			"} // end namespace $1"
		]
	},
	"Insert current file name": {
		"prefix": "fn",
		"body": [
			"${TM_FILENAME/(.*)\\..+$/$1/}"
		]
	},
	"Insert hpp template": {
		"prefix": "ht",
		"body": [
			"#pragma once",
			"",
			"class ${TM_FILENAME/(.*)\\..+$/$1/}",
			"{",
			"public:",
			"  ${TM_FILENAME/(.*)\\..+$/$1/}();",
			"",
			"};"
		]
	},
	".cpp template": {
		"prefix": "st",
		"body": [
			"#include \"$TM_FILENAME_BASE.hpp\"",
			"",
			"${TM_FILENAME/(.*)\\..+$/$1/}::${TM_FILENAME/(.*)\\..+$/$1/}()",
			"{$0}",
		]
	},
	"class method": {
		"prefix": "cm",
		"body": [
			"${1:void} $TM_FILENAME_BASE::${2:$TM_FILENAME_BASE}($3)",
			"{",
			"  $4",
			"}"
		]
	},
}