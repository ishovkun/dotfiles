# set -g default-shell ${SHELL}
# set -g default-command ${SHELL}
if-shell "uname | grep -q Darwin" "set -g default-shell ${SHELL}; set -g default-command ${SHELL}"
if-shell "uname | grep -q Linux" "set -g default-shell /usr/bin/zsh; set -g default-command /usr/bin/zsh"


unbind-key -n C-a


# truecolor
set -g default-terminal "xterm-24bit"
set -g terminal-overrides ',xterm-24bit:Tc'
# number tabs from 1
set -g base-index 1

# enable mouse
set -g mouse on
setw -g xterm-keys on

# timeout for pressing escape
set -sg escape-time 0

# go to a specific window
bind-key -n M-1 select-window -t 1
bind-key -n M-2 select-window -t 2
bind-key -n M-3 select-window -t 3
bind-key -n M-4 select-window -t 4
bind-key -n M-5 select-window -t 5
bind-key -n M-6 select-window -t 6
bind-key -n M-7 select-window -t 7
bind-key -n M-8 select-window -t 8
bind-key -n M-9 select-window -t 9
bind-key -n M-0 select-window -t 10

# resize split
bind-key -n M-S-Up resize-pane -U 15
bind-key -n M-S-Down resize-pane -D 15
bind-key -n M-S-Left resize-pane -L 25
bind-key -n M-S-Right resize-pane -R 25

# bind-key -n C-' next-window

# vim keys in copy mode
# bind-key -T copy-mode-vi 'v' send-keys -X begin-selection

run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection 2> /dev/null || true'
# run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
# run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'
run -b 'tmux bind -t vi-copy L end-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'

if-shell '[ $(echo "$XDG_SESSION_TYPE") == "X11" ]' {
  set -s copy-command 'xclip'
}
if-shell '[ $(echo "$XDG_SESSION_TYPE") == "wayland" ]' {
  set -s copy-command 'wl-copy'
}

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

is_fzf="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?emacs$'"

is_emacsclient="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?emacsclient$'"

bind -n M-h run "($is_vim         && tmux send-keys M-h) || \
                 ($is_fzf         && tmux send-keys M-h) || \
                 ($is_emacsclient && tmux send-keys M-h) || \
                 tmux select-pane -L"

bind -n M-j run "($is_vim         && tmux send-keys M-j)  || \
                 ($is_fzf         && tmux send-keys M-j)  || \
                 ($is_emacsclient && tmux send-keys M-j) || \
                 tmux select-pane -D"

bind -n M-k run "($is_vim         && tmux send-keys M-k) || \
                 ($is_fzf         && tmux send-keys M-k) || \
                 ($is_emacsclient && tmux send-keys M-k) || \
                 tmux select-pane -U"

bind -n M-l run "($is_vim         && tmux send-keys M-l) || \
                 ($is_fzf         && tmux send-keys M-l) || \
                 ($is_emacsclient && tmux send-keys M-l) || \
                 tmux select-pane -R"

bind-key -T copy-mode-vi -n C-e send-keys -X halfpage-up

# Do not copy selection and cancel copy mode on drag end event
# Prefer iTerm style selection: select, then mouse click to copy to buffer
unbind -T copy-mode-vi MouseDragEnd1Pane
bind -T copy-mode-vi MouseDown1Pane select-pane \;\
  send-keys -X copy-pipe "pbcopy" \;\
  send-keys -X clear-selection

# Prefix
set-option -g prefix C-Space
unbind C-Space
bind C-Space send-prefix

bind -n M-. previous-window
bind -n M-/ next-window
bind -n S-Enter new-window
bind -n M-BSpace kill-pane
bind -n C-Enter send-keys Escape "[13;5u"
bind -n M-` send-keys M-`

# bind-key R source-file ~/.tmux.conf
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

# Easy split pane commands
bind v split-window -h -c "#{pane_current_path}"
bind s split-window -v -c "#{pane_current_path}"

# enter vim mode with c-space e
set-window-option -g mode-keys vi
bind-key -T prefix e copy-mode
bind-key -n F7 copy-mode

# list sessions
bind-key    -T prefix x  kill-pane
bind-key    -T prefix X  kill-session


######################
### DESIGN CHANGES ###
######################
setw -g mode-style reverse
# panes

## Status bar design
# status line
set -g status-justify left
set -g status-interval 2
setw -g window-status-current-style fg=colour16,bg=colour4
set -g status-bg colour0
set -g status-fg colour12
# set -g status-utf8 on
# set -g utf8 on

# messaging
# color of messages
set -g message-style bg=colour1,fg='#8be9fd'

bind-key -T prefix w choose-tree -Zw -F "#{?pane_format,#{pane_current_command} #{pane_title},#{?window_format,#{window_name}#{window_flags}#{?#{==:#{window_panes},1}, #{?#{!=:#{window_name},#{pane_current_command}},#{pane_current_command} ,}#{pane_title},},#[fg=colour105]#{?session_grouped, (group #{session_group}: #{session_group_list}),}#{?session_attached,(attached),#[fg=colour9](unattached)}}}"

# user name
set -g status-right-length 140
# set -g status-right '#(~/gitmux "#{pane_current_path}")  #[fg=green]#H '
set -g status-right 'ï‡€#{df_avail} #{df_percent} #(~/gitmux "#{pane_current_path}")  #[fg=green]#H '

# copy plugin
# set -g @yank_action 'copy-pipe' # or 'copy-pipe-and-cancel' for the default
# set -g @yank_selection 'primary' # or 'secondary' or 'clipboard'
# set -g @yank_selection 'clipboard' # or 'secondary' or 'clipboard'

run-shell $HOME/build/tmux-df/df.tmux
run-shell $HOME/build/tmux-resurrect/resurrect.tmux
# run-shell $HOME/build/tmux-yank/yank.tmux

